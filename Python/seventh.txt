Lists are called mutable because you can modify their content after they are created. This means you can change, add, or remove elements from a list without having to create a new list.

List Operations and Functions with Examples:

a. Accessing, Traversing, and Slicing the List Elements:

Accessing elements using indexing, traversing using loops, and slicing using start:stop:step.
my_list = [1, 2, 3, 4, 5]

# Accessing
first_element = my_list[0]

# Traversing
for element in my_list:
    print(element)

# Slicing
subset = my_list[1:4]
b. Concatenation and Repetition:

Concatenate lists using the + operator and repeat using *.
list1 = [1, 2, 3]
list2 = [4, 5, 6]

# Concatenation
combined_list = list1 + list2

# Repetition
repeated_list = list1 * 2
c. Append, Extend, Sort, Remove, and Delete:

Append adds an element to the end, extend adds elements from another list, sort arranges elements in ascending order, remove deletes a specific element, and delete removes an element by index.
my_list = [3, 1, 4, 1, 5]

my_list.append(6)
my_list.extend([7, 8])
my_list.sort()
my_list.remove(4)
del my_list[1]
d. Len, Sum, Min, and Max:

Len returns the length, sum calculates the sum of elements, min finds the minimum value, and max finds the maximum value.
length = len(my_list)
total_sum = sum(my_list)
minimum_value = min(my_list)
maximum_value = max(my_list)
e. Split and Join:

Split breaks a string into a list of substrings, and join concatenates elements of a list into a string.
sentence = "Hello, world!"
words = sentence.split(", ")  # Results in ['Hello', 'world!']

new_sentence = " ".join(words)  # Results in 'Hello world!'